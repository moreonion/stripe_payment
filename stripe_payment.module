<?php

/**
 * @file
 * Hook implementations for the stripe_payment module.
 */

use Drupal\stripe_payment\Api;
use Drupal\stripe_payment\CreditCardController;
use Drupal\stripe_payment\CreditCardControllerRecurrent;
use Drupal\stripe_payment\PaymentRequestController;
use Drupal\stripe_payment\PaymentRequestControllerRecurrent;
use Drupal\stripe_payment\SepaController;
use Drupal\stripe_payment\SepaControllerRecurrent;
use Drupal\stripe_payment\Utils;
use Drupal\webform_paymethod_select\PaymentRecurrentController;
use Stripe\Event;
use Stripe\Webhook;
use Stripe\Exception\InvalidRequestException;
use Stripe\Exception\SignatureVerificationException;

/**
 * Stripe specific success payment status.
 *
 * The credentials have passed verification and were accepted by Stripe,
 * but we donâ€™t (yet) know if the actual payment went through.
 */
define('STRIPE_PAYMENT_STATUS_ACCEPTED', 'stripe_payment_status_accepted');

/**
 * Stripe specific failed payment status.
 *
 * This status is set, when a payment is submitted without a previous AJAX
 * request to retrieve the intent.
 */
define('STRIPE_PAYMENT_STATUS_NO_INTENT', 'stripe_payment_no_intent');

/**
 * Implements hook_payment_status_info().
 */
function stripe_payment_payment_status_info() {
  return [
    new PaymentStatusInfo([
      'parent' => PAYMENT_STATUS_SUCCESS,
      'status' => STRIPE_PAYMENT_STATUS_ACCEPTED,
      'title' => t('Accepted'),
    ]),
    new PaymentStatusInfo([
      'parent' => PAYMENT_STATUS_FAILED,
      'status' => STRIPE_PAYMENT_STATUS_NO_INTENT,
      'title' => t('Payment submitted without intent.'),
    ]),
  ];
}

/**
 * Implements hook_element_info().
 */
function stripe_payment_element_info() {
  $types['stripe_payment_field'] = [
    '#theme' => 'stripe_payment_field',
    '#theme_wrappers' => ['form_element'],
  ];
  return $types;
}

/**
 * Implemnts hook_theme().
 */
function stripe_payment_theme() {
  $hooks['stripe_payment_field'] = [
    'render element' => 'element',
    'template' => 'stripe-payment-field',
    'file' => 'stripe_payment.theme.inc',
  ];
  $hooks['stripe_payment_sepa_mandate_info'] = [
    'template' => 'stripe-payment-sepa-mandate-info',
    'file' => 'stripe_payment.theme.inc',
  ];
  return $hooks;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function stripe_payment_payment_method_controller_info() {
  $recurrent = module_exists('webform_paymethod_select') && interface_exists(PaymentRecurrentController::class, TRUE);
  return [
    'stripe_payment_credit_card' => $recurrent ? CreditCardControllerRecurrent::class : CreditCardController::class,
    'stripe_payment_payment_request' => $recurrent ? PaymentRequestControllerRecurrent::class : PaymentRequestController::class,
    'stripe_payment_sepa' => $recurrent ? SepaControllerRecurrent::class : SepaController::class,
  ];
}

/**
 * Implements hook_libraries_info().
 *
 * For stripes php wrapper library.
 */
function stripe_payment_libraries_info() {
  $libraries['stripe-php'] = array(
    'name' => 'Stripe',
    'vendor url' => 'https://stripe.com//',
    'download url' => 'https://github.com/stripe/stripe-php',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/([0-9\.]+)/',
      'lines' => 1,
    ),
    'xautoload' => function ($adapter) {
       $adapter->composerJson('composer.json');
    },
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function stripe_payment_menu($has_apple_pay = NULL) {
  // Webhook handler.
  $items['stripe-payment/webhooks/pmid/%entity_object'] = [
    'title' => 'Stripe Webhook',
    'page callback' => 'stripe_payment_webhook',
    'page arguments' => [3],
    'load arguments' => ['payment_method'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'little_helpers_deliver_json',
  ];
  $items['admin/config/services/payment/stripe'] = [
    'title' => 'Stripe payment settings',
    'description' => 'Configure site-wide options for Stripe.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['variable_module_form', 'stripe_payment'],
    'access arguments' => ['payment.payment.administer'],
    'weight' => 10,
  ];
  // Provide the Domain Association File for Apple Pay.
  $has_apple_pay = $has_apple_pay ?? (bool) array_filter(entity_load('payment_method'), function ($m) {
    return $m->controller instanceof PaymentRequestController && $m->enabled;
  });
  if ($has_apple_pay) {
    $items['.well-known/apple-developer-merchantid-domain-association'] = [
      'title' => 'Apple Developer MerchantID Domain Association',
      'access callback' => TRUE,
      'page callback' => 'stripe_payment_apple_pay_domain_association_file',
    ];
  }
  return $items;
}

/**
 * Page callback for Stripe webhook.
 */
function stripe_payment_webhook($method) {
  if (!Utils::isStripeMethod($method)) {
    $message = "Received Stripe event for wrong payment method \"@method\" (pmid: @pmid).";
    $variables = [
      '@method' => $method->controller->name,
      '@pmid' => $method->pmid,
    ];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_ERROR);
    return 405;
  }
  $endpoint_secret = $method->controller_data['webhook_key'];
  $payload = @file_get_contents('php://input');
  $sig_header = $_SERVER['HTTP_STRIPE_SIGNATURE'] ?? NULL;
  $event = NULL;

  try {
    libraries_load('stripe-php');
    $event = Webhook::constructEvent(
        $payload, $sig_header, $endpoint_secret
    );
  }
  catch (\UnexpectedValueException $e) {
    $message = 'Rejected data for webhook (pmid: @pmid). @description.';
    $variables = ['@description' => $e->getMessage(), '@pmid' => $method->pmid];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_WARNING);
    return MENU_ACCESS_DENIED;
  }
  catch (SignatureVerificationException $e) {
    $message = 'Rejected signature for webhook (pmid: @pmid). @description.';
    $variables = ['@description' => $e->getMessage(), '@pmid' => $method->pmid];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_WARNING);
    return MENU_ACCESS_DENIED;
  }

  $event_types = [
    'succeeded' => [
      Event::PAYMENT_INTENT_SUCCEEDED,
      Event::SETUP_INTENT_SUCCEEDED,
    ],
    'failed' => [
      Event::PAYMENT_INTENT_PAYMENT_FAILED,
      Event::SETUP_INTENT_SETUP_FAILED,
    ],
  ];
  if (!in_array($event->type, array_merge($event_types['succeeded'], $event_types['failed']))) {
    return 'Ignoring unkown event';
  }

  $intent = $event->data->object;
  $pid = db_query(
    'SELECT pid from {stripe_payment} WHERE stripe_id = :id',
    [':id' => $intent->id]
  )->fetchField();
  if (!$pid) {
    // Stripe might send notifications for payments we donâ€™t care about, e.g:
    // - Payments that fail already on the payment form.
    // - Payments generated by recurring subscriptions.
    // - Payments not created via Campaignion.
    return 'Ignoring unkown payment';
  }
  $payment = reset(entity_load("payment", [$pid]));

  if ($payment->method->pmid !== $method->pmid) {
    // The payment was created by a different Stripe payment method.
    return 'Ignoring payment for different webhook.';
  }

  if (in_array($event->type, $event_types['succeeded'])) {
    $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
  }
  elseif (in_array($event->type, $event_types['failed'])) {
    $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_FAILED));
    $error = $intent->last_payment_error;
    $variables = [
      '@code' => $error->code,
      '@decline_code' => $error->decline_code,
      '@param' => $error->param,
      '@message' => $error->message,
      '@pid' => $payment->pid,
      '@pmid' => $payment->method->pmid,
    ];
    $message = 'Card declined (@code, @decline_code) in @param: @message (pid: @pid, pmid: @pmid).';
    watchdog('stripe_payment', $message, $variables, WATCHDOG_INFO, $error->doc_url);
  }
  entity_save('payment', $payment);
  return 'OK';
}

/**
 * Menu callback returning the Stripe Domain Association File for Apple Pay.
 *
 * The file is a copy of
 * https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association.
 */
function stripe_payment_apple_pay_domain_association_file() {
  drupal_add_http_header('Content-type', 'application/octet-stream');
  $path = drupal_get_path('module', 'stripe_payment');
  $path .= '/static/apple-developer-merchantid-domain-association';
  readfile($path);
  drupal_page_footer();
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stripe_payment_form_payment_form_payment_method_alter(&$form, &$form_state) {
  if (Utils::isStripeMethod($form_state['payment_method'])) {
    $form['#submit'][] = 'stripe_payment_method_configuration_form_submit';
  }
}

/**
 * Custom submit handler for the Stipe payment method configuration form.
 */
function stripe_payment_method_configuration_form_submit($element, &$form_state) {
  $method = $form_state['payment_method'];
  if (empty($method->controller_data['webhook_key'])) {
    stripe_payment_register_webhook($method);
    entity_save('payment_method', $method);
  }
}

/**
 * Register a webhook for a payment method on Stripe.
 */
function stripe_payment_register_webhook(\PaymentMethod $method) {
  $api = Api::init($method);
  $url = url('stripe-payment/webhooks/pmid/' . $method->pmid, ['absolute' => TRUE]);
  $webhook = $api->registerWebhook($url);
  $method->controller_data['webhook_key'] = $webhook->secret;
  $method->controller_data['webhook_id'] = $webhook->id;
}

/**
 * Implements hook_entity_load().
 */
function stripe_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment') {
    $q = db_select('stripe_payment', 't');
    $q->leftJoin('stripe_payment_sepa_mandate_info', 's', 's.pid=t.pid');
    $q->fields('t', ['pid', 'stripe_id', 'type'])
      ->fields('s', ['mandate_reference', 'last4'])
      ->condition('t.pid', array_keys($entities));
    $result = $q->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      $payment->stripe = [
        'stripe_id' => $data['stripe_id'],
        'type' => $data['type'],
      ];
      if ($data['mandate_reference'] || $data['last4']) {
        $payment->stripe_sepa = [
          'mandate_reference' => $data['mandate_reference'],
          'last4' => $data['last4'],
        ];
      }
    }
  }
}

/**
 * Implements hook_payment_method_insert().
 */
function stripe_payment_payment_method_insert(\PaymentMethod $method) {
  if ($method->controller instanceof PaymentRequestController) {
    variable_set('menu_rebuild_needed', TRUE);
  }
}

/**
 * Implements hook_payment_method_update().
 */
function stripe_payment_payment_method_update(\PaymentMethod $method) {
  if ($method->controller instanceof PaymentRequestController) {
    variable_set('menu_rebuild_needed', TRUE);
  }
}

/**
 * Implements hook_payment_method_delete().
 */
function stripe_payment_payment_method_delete(\PaymentMethod $method) {
  if (Utils::isStripeMethod($method)) {
    if (!empty($method->controller_data['webhook_id'])) {
      $api = Api::init($method);
      try {
        $api->deleteWebhook($method->controller_data['webhook_id']);
      }
      catch (InvalidRequestException $e) {
        if ($e->getStripeCode() === 'resource_missing') {
          $message = 'No webhook found for pmid @pmid, nothing to delete. @description.';
          $variables = [
            '@pmid' => $method->pmid,
            '@description' => $e->getMessage(),
          ];
          watchdog('stripe_payment', $message, $variables, WATCHDOG_INFO);
        }
        else {
          $message = 'Could not delete webhook for pmid @pmid. @description.';
          $variables = [
            '@pmid' => $method->pmid,
            '@description' => $e->getMessage(),
          ];
          watchdog('stripe_payment', $message, $variables, WATCHDOG_WARNING);
        }
      }
    }
    if ($method->controller instanceof PaymentRequestController) {
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
}

/**
 * Implements hook_payment_insert().
 */
function stripe_payment_payment_insert(\Payment $payment) {
  if (Utils::isStripeMethod($payment->method)) {
    if (!empty($payment->stripe)) {
      $data = $payment->stripe;
      $data['pid'] = $payment->pid;
      db_insert('stripe_payment')->fields($data)->execute();
    }
    if (!empty($payment->stripe_sepa)) {
      $data = $payment->stripe_sepa;
      $data['pid'] = $payment->pid;
      db_insert('stripe_payment_sepa_mandate_info')->fields($data)->execute();
    }
  }
}

/**
 * Implements hook_payment_update().
 */
function stripe_payment_payment_update(\Payment $payment) {
  if (Utils::isStripeMethod($payment->method)) {
    if (!empty($payment->stripe)) {
      db_merge('stripe_payment')
        ->key(['pid' => $payment->pid])
        ->fields($payment->stripe)
        ->execute();
    }
    if (!empty($payment->stripe_sepa)) {
      db_merge('stripe_payment_sepa_mandate_info')
        ->key(['pid' => $payment->pid])
        ->fields($payment->stripe_sepa)
        ->execute();
    }
  }
}

/**
 * Implements hook_payment_delete().
 */
function stripe_payment_payment_delete(\Payment $payment) {
  db_delete('stripe_payment')->condition('pid', $payment->pid)->execute();
  db_delete('stripe_payment_sepa_mandate_info')
    ->condition('pid', $payment->pid)->execute();
}

/**
 * Element validate callback: Comma separated keys.
 */
function _stripe_payment_validate_comma_separated_keys($element, &$form_state, $form) {
  $keys = array_map('trim', explode(',', $element['#value']));
  form_set_value($element, $keys, $form_state);
}
