<?php

/**
 * @file
 * Hook implementations for the stripe_payment module.
 */

use Drupal\stripe_payment\Api;
use Drupal\stripe_payment\CreditCardController;
use Stripe\Event;
use Stripe\Webhook;
use Stripe\Exception\SignatureVerificationException;

/**
 * Stripe specific success payment status.
 *
 * The credentials have passed verification and were accepted by Stripe,
 * but we don’t (yet) know if the actual payment went through.
 */
define('STRIPE_PAYMENT_STATUS_ACCEPTED', 'stripe_payment_status_accepted');

/**
 * Implements hook_payment_status_info().
 */
function stripe_payment_payment_status_info() {
  return [
    new PaymentStatusInfo([
      'parent' => PAYMENT_STATUS_SUCCESS,
      'status' => STRIPE_PAYMENT_STATUS_ACCEPTED,
      'title' => t('Accepted'),
    ]),
  ];
}

/**
 * Implements hook_element_info().
 */
function stripe_payment_element_info() {
  $types['stripe_payment_field'] = [
    '#theme' => 'stripe_payment_field',
    '#theme_wrappers' => ['form_element'],
  ];
  return $types;
}

/**
 * Implemnts hook_theme().
 */
function stripe_payment_theme() {
  $hooks['stripe_payment_field'] = [
    'render element' => 'element',
    'template' => 'stripe-payment-field',
    'file' => 'stripe_payment.theme.inc',
  ];
  return $hooks;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function stripe_payment_payment_method_controller_info() {
  return array(
    'stripe_payment_credit_card' => '\Drupal\stripe_payment\CreditCardController',
  );
}

/**
 * Implements hook_libraries_info().
 *
 * For stripes php wrapper library.
 */
function stripe_payment_libraries_info() {
  $libraries['stripe-php'] = array(
    'name' => 'Stripe',
    'vendor url' => 'https://stripe.com//',
    'download url' => 'https://github.com/stripe/stripe-php',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/([0-9\.]+)/',
      'lines' => 1,
    ),
    'xautoload' => function ($adapter) {
       $adapter->composerJson('composer.json');
    },
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function stripe_payment_menu() {
  // Webhook handler.
  $items['stripe-payment/webhooks/pmid/%entity_object'] = [
    'title' => 'Stripe Webhook',
    'page callback' => 'stripe_payment_webhook',
    'page arguments' => [3],
    'load arguments' => ['payment_method'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'little_helpers_deliver_json',
  ];
  return $items;
}

/**
 * Page callback for Stripe webhook.
 */
function stripe_payment_webhook($method) {
  if ($method->controller->name != 'stripe_payment_credit_card') {
    $message = "Received Stripe event for wrong payment method \"@method\" (pmid: @pmid).";
    $variables = ['@method' => $method->controller->name, '@pmid' => $method->pmid];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_ALERT);
    return 405;
  }
  $endpoint_secret = $method->controller_data['webhook_key'];
  $payload = @file_get_contents('php://input');
  $sig_header = $_SERVER['HTTP_STRIPE_SIGNATURE'] ?? NULL;
  $event = NULL;

  try {
    libraries_load('stripe-php');
    $event = Webhook::constructEvent(
        $payload, $sig_header, $endpoint_secret
    );
  }
  catch (\UnexpectedValueException $e) {
    $message = 'Rejected data for webhook (pmid: @pmid). @description.';
    $variables = ['@description' => $e->getMessage(), '@pmid' => $method->pmid];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_ALERT);
    return MENU_ACCESS_DENIED;
  }
  catch (SignatureVerificationException $e) {
    $message = 'Rejected signature for webhook (pmid: @pmid). @description.';
    $variables = ['@description' => $e->getMessage(), '@pmid' => $method->pmid];
    watchdog('stripe_payment', $message, $variables, WATCHDOG_ALERT);
    return MENU_ACCESS_DENIED;
  }

  $event_types = [
    'succeeded' => [Event::PAYMENT_INTENT_SUCCEEDED, Event::SETUP_INTENT_SUCCEEDED],
    'failed' => [Event::PAYMENT_INTENT_PAYMENT_FAILED, Event::SETUP_INTENT_SETUP_FAILED],
  ];
  if (!in_array($event->type, array_merge($event_types['succeeded'], $event_types['failed']))) {
    return 'Ignoring unkown event';
  }

  $intent = $event->data->object;
  $pid = db_query(
    'SELECT pid from {stripe_payment} WHERE stripe_id = :id',
    [':id' => $intent->id]
  )->fetchField();
  if (!$pid) {
    // A payment can already fail on the payment form.
    // Then there’s no record that needs to be updated.
    return 'Ignoring unkown payment';
  }
  $payment = reset(entity_load("payment", [$pid]));

  if (in_array($event->type, $event_types['succeeded'])) {
    $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
  }
  elseif (in_array($event->type, $event_types['failed'])) {
    $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_FAILED));
    $error = $intent->last_payment_error;
    $variables = [
      '@code' => $error->code,
      '@decline_code' => $error->decline_code,
      '@param' => $error->param,
      '@message' => $error->message,
      '@pid' => $payment->pid,
      '@pmid' => $payment->method->pmid,
    ];
    $message = 'Card declined (@code, @decline_code) in @param: @message (pid: @pid, pmid: @pmid).';
    watchdog('stripe_payment', $message, $variables, WATCHDOG_ALERT, $error->doc_url);
  }
  entity_save('payment', $payment);
  return 'OK';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stripe_payment_form_payment_form_payment_method_alter(&$form, $form_state, $form_id) {
  $form['#submit'][] = 'stripe_payment_method_configuration_form_submit';
}

/**
 * Custom submit handler for the Stipe payment method configuration form.
 */
function stripe_payment_method_configuration_form_submit($element, &$form_state) {
  $method = $form_state['payment_method'];
  if (empty($method->controller_data['webhook_key'])) {
    stripe_payment_register_webhook($method);
    entity_save('payment_method', $method);
  }
}

/**
 * Register a webhook for a payment method on Stripe.
 */
function stripe_payment_register_webhook(\PaymentMethod $method) {
  $api = Api::init($method);
  $url = url('stripe-payment/webhooks/pmid/' . $method->pmid, ['absolute' => TRUE]);
  $webhook = $api->registerWebhook($url);
  $method->controller_data['webhook_key'] = $webhook->secret;
}

/**
 * Implements hook_entity_load().
 */
function stripe_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment') {
    $query = db_select('stripe_payment', 't')
      ->fields('t')
      ->condition('pid', array_keys($entities));
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      $payment->stripe = [
        'stripe_id' => $data['stripe_id'],
        'type' => $data['type'],
      ];
    }
  }
}

/**
 * Implements hook_payment_insert().
 */
function stripe_payment_payment_insert(\Payment $payment) {
  if ($payment->method->controller instanceof CreditCardController) {
    if (!empty($payment->stripe)) {
      $data = $payment->stripe;
      $data['pid'] = $payment->pid;
      db_insert('stripe_payment')->fields($data)->execute();
    }
  }
}

/**
 * Implements hook_payment_update().
 */
function stripe_payment_payment_update(\Payment $payment) {
  if ($payment->method->controller instanceof CreditCardController) {
    if (!empty($payment->stripe)) {
      $data = $payment->stripe;
      $update = db_merge('stripe_payment')
        ->key(['pid' => $payment->pid])
        ->fields($data)
        ->execute();
    }
  }
}

/**
 * Implements hook_payment_delete().
 */
function stripe_payment_payment_delete(\Payment $payment) {
  db_delete('stripe_payment')->condition('pid', $payment->pid)->execute();
}

/**
 * Element validate callback: Comma separated keys.
 */
function _stripe_payment_validate_comma_separated_keys($element, &$form_state, $form) {
  $keys = array_map('trim', explode(',', $element['#value']));
  form_set_value($element, $keys, $form_state);
}
