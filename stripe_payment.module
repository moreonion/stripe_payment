<?php

use \Drupal\stripe_payment\CreditCardController;

/**
 * Implements hook_element_info().
 */
function stripe_payment_element_info() {
  $types['stripe_payment_field'] = [
    '#theme' => 'stripe_payment_field',
    '#theme_wrappers' => ['form_element'],
  ];
  return $types;
}

/**
 * Implemnts hook_theme().
 */
function stripe_payment_theme() {
  $hooks['stripe_payment_field'] = [
    'render element' => 'element',
    'template' => 'stripe-payment-field',
    'file' => 'stripe_payment.theme.inc',
  ];
  return $hooks;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function stripe_payment_payment_method_controller_info() {
  return array(
    'stripe_payment_credit_card' => '\Drupal\stripe_payment\CreditCardController',
  );
}

/**
* Implements hook_libraries_info().
*
* for stripes php wrapper library.
*/
function stripe_payment_libraries_info() {
  $libraries['stripe-php'] = array(
    'name' => 'Stripe',
    'vendor url' => 'https://stripe.com//',
    'download url' => 'https://github.com/stripe/stripe-php',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/([0-9\.]+)/',
      'lines' => 1
    ),
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
  );
  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stripe_payment_form_payment_form_payment_method_alter(&$form, $form_state, $form_id) {
  array_unshift($form['#submit'], 'stripe_payment_method_configuration_form_submit');
}

/**
 * Custom submit handler for the Stipe payment method configuration form.
 */
function stripe_payment_method_configuration_form_submit($element, &$form_state) {
  $method = &$form_state['payment_method'];
  if (empty($method->controller_data['webhook_key'])) {
    stripe_payment_register_webhook($method);
  }
}

/**
 * Register a webhook for a payment method on Stripe.
 */
function stripe_payment_register_webhook(\PaymentMethod &$method) {
  \Stripe\Stripe::setApiKey($method->controller_data['private_key']);
  $webhook = \Stripe\WebhookEndpoint::create([
    'url' => url('stripe-payment/webhooks/pmid/' . $method->pmid, ['absolute' => TRUE]),
    'enabled_events' => [
      'setup_intent.succeeded',
      'setup_intent.setup_failed',
      'payment_intent.payment_failed',
      'payment_intent.succeeded',
    ],
    'api_version' => '2019-08-14',  // otherwise the accountâ€™s default API version will be used.
  ]);
  $method->controller_data['webhook_key'] = $webhook->secret;
}
