<?php

/**
 * @file
 * Installation and uninstallation functions.
 */

/**
 * Implements hook_schema().
 *
 * Adds the schema for the stripe_payment_payment_controllers table which
 * stores serialized PaymentMethodController objects.
 */
function stripe_payment_schema() {
  $schema['stripe_payment_plans'] = [
    'fields' => [
      'pid' => [
        'type' => 'serial',
      ],
      'id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'amount' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'default'  => 0,
        'not null' => TRUE,
      ],
      'payment_interval' => [
        'type' => 'varchar',
        'length' => 25,
        'not null' => TRUE,
        'default' => '',
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'currency' => [
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['pid'],
    'unique keys' => [
      'pid' => ['pid'],
      'id' => ['id'],
    ],
  ];
  $schema['stripe_payment'] = [
    'fields' => [
      'pid' => [
        'description' => 'The payment id.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'stripe_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'type' => [
        'type' => 'varchar',
        'length' => 16,
        'default'  => '',
        'not null' => TRUE,
      ],
      'plan_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ],
    ],
    'primary key' => ['pid'],
    'unique keys' => [
      'pid' => ['pid'],
      'stripe_id' => ['stripe_id'],
    ],
  ];
  return $schema;
}

/**
 * Create webhooks for exising payment methods.
 */
function stripe_payment_update_7008() {
  $methods = entity_load('payment_method', FALSE, [
    'controller_class_name' => 'stripe_payment_credit_card',
  ]);
  foreach ($methods as $method) {
    if (empty($method->controller_data['webhook_key'])) {
      stripe_payment_register_webhook($method);
      entity_save('payment_method', $method);
    }
  }
}

/**
 * Enable payment_recurrence.
 */
function stripe_payment_update_7007() {
  if (!module_enable(['payment_recurrence'], TRUE)) {
    throw new DrupalUpdateException('Unable to enable payment_recurrence.');
  }
}

/**
 * Update Stripe input settings.
 */
function stripe_payment_update_7006() {
  $methods = entity_load('payment_method', FALSE, [
    'controller_class_name' => 'stripe_payment_credit_card',
  ]);
  foreach ($methods as $method) {
    $map = $method->controller_data['field_map'];
    unset($method->controller_data['field_map']);
    $s['billing_details']['name']['keys'] = $map['name'];
    $s['billing_details']['first_name']['keys'] = $map['first_name'];
    $s['billing_details']['last_name']['keys'] = $map['last_name'];
    $s['billing_details']['address_line1']['keys'] = $map['address_line1'];
    $s['billing_details']['address_line2']['keys'] = $map['address_line2'];
    $s['billing_details']['city']['keys'] = $map['address_city'];
    $s['billing_details']['state']['keys'] = $map['address_state'];
    $s['billing_details']['postcode']['keys'] = $map['address_zip'];
    $s['billing_details']['country']['keys'] = $map['address_country'];
    $method->controller_data['input_settings'] = $s;
    entity_save('payment_method', $method);
  }
}

/**
 * Enable payment_controller_data and migrate configurations.
 */
function stripe_payment_update_7005() {
  if (!module_enable(['payment_controller_data'])) {
    throw new DrupalUpdateException('Could not enable payment_controller_data.');
  }

  $result = db_select('stripe_payment_payment_method_controller', 'd')
    ->fields('d')
    ->execute();
  foreach ($result as $row) {
    $method = entity_load_single('payment_method', $row->pmid);
    $method->controller_data = [
      'private_key' => $row->private_key,
      'public_key' => $row->public_key,
    ] + unserialize($row->config);
    entity_save('payment_method', $method);
  }
  db_drop_table('stripe_payment_payment_method_controller');
}

/**
 * Use a machine-name instead of the FQ-class to identify the controller.
 */
function stripe_payment_update_7004() {
  db_update('payment_method')
    ->fields(['controller_class_name' => 'stripe_payment_credit_card'])
    ->condition(
      'controller_class_name',
      '\Drupal\stripe_payment\CreditCardController'
    )->execute();
}

/**
 * Add config column to stripe_payment_payment_method_controller.
 */
function stripe_payment_update_7003() {
  db_add_field('stripe_payment_payment_method_controller', 'config', [
    'type' => 'text',
  ]);
  db_update('stripe_payment_payment_method_controller')
    ->fields(['config' => serialize(['field_map' => []])])
    ->execute();
}

/**
 * Add stripe_payment table.
 */
function stripe_payment_update_7002() {
  $schema = stripe_payment_schema();
  db_create_table('stripe_payment', $schema['stripe_payment']);
}

/**
 * Add stripe_payment_plans table.
 */
function stripe_payment_update_7001() {
  $schema = stripe_payment_schema();
  db_create_table('stripe_payment_plans', $schema['stripe_payment_plans']);
}
